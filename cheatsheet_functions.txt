# Functions

## Pattern matching

Order is important.
Should a pattern match fail, it moves on to the next element.
Always add a catch all pattern to avoid errors.

-- function arguments
factorial :: (Integral a) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- tuples
first :: (a, b, c) -> a
first (x, _, _) = x

-- list
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x

-- list comprehensions
let xs = [(1,3), (2,5)]
[a+b | (a,b) <- xs]

-- as patterns
firstLetter all@(x:xs) = "First letter of " ++ all ++ " is " ++ [x]


## Gards

max' a b
  | a > b = a
  | otherwise = b


## Where bindings

initials :: String -> String -> String  
initials firstname lastname = [f] ++ ". " ++ [l] ++ "."  
    where (f:_) = firstname  
          (l:_) = lastname


## Let bindings

Let bindings are expressions so can be used anywhere.
The form is let <bindings> in <expression>.


## Case expressions

Expressions also.
Function parameters pattern matching is just syntactic sugar for case expressions.

factorial n =
    case n of
        0 -> 1
        n -> n * factorial (n - 1)
