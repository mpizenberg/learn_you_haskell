# Recursion

## Advices

when trying to think of a recursive way to solve a problem,
try to think of when a recursive solution doesn't apply
and see if you can use that as an edge case,
think about identities and think about whether you'll break apart
the parameters of the function (for instance,
lists are usually broken into a head and a tail via pattern matching)
and on which part you'll use the recursive call.


## Examples

maximum' :: (Ord a) => [a] -> a
maximum' [] = error "maximum of empty list"
maximum' [x] = x
maximum' (x:xs) = max x (maximum' xs)


quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
    let
        smallerSorted = quicksort [a | a <- xs, a <= x]
        biggerSorted = quicksort [a | a <- xs, a > x]
    in
        smallerSorted ++ [x] ++ biggerSorted
